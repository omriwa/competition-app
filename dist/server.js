!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t){e.exports=require("express")},function(e,t,r){"use strict";r.r(t);var n=r(0);const o=r.n(n).a.Router();o.use((e,t,r)=>{r()}),o.get("/",(e,t)=>{t.send("competitor")}).get("/register",(e,t)=>{t.send("register")}).get("/login",(e,t)=>{t.send("login")}),t.default=o},function(e,t,r){"use strict";r.r(t);var n=r(0);const o=r.n(n).a.Router();o.use((e,t,r)=>{r()}),o.get("/",(e,t)=>{t.send("trainer")}).get("/register",(e,t)=>{t.send("trainer register")}).get("/login",(e,t)=>{t.send("trainer login")}),t.default=o},function(e,t,r){"use strict";r.r(t),t.default=((e,t,r)=>{t.status(404),t.send("404 Not Found")})},function(e,t,r){"use strict";t.__esModule=!0;var n=r(2),o=r(1);t.default={trainerRouter:n.default,competitorRouter:o.default}},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:u}catch(e){n=u}}();var c,l=[],a=!1,f=-1;function d(){a&&c&&(a=!1,c.length?l=c.concat(l):f=-1,l.length&&p())}function p(){if(!a){var e=s(d);a=!0;for(var t=l.length;t;){for(c=l,l=[];++f<t;)c&&c[f].run();f=-1,t=l.length}c=null,a=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===u||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new g(e,t)),1!==l.length||a||s(p)},g.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){e.exports=require("mongoose")},function(e,t,r){(function(e){function r(e,t){for(var r=0,n=e.length-1;n>=0;n--){var o=e[n];"."===o?e.splice(n,1):".."===o?(e.splice(n,1),r++):r&&(e.splice(n,1),r--)}if(t)for(;r--;r)e.unshift("..");return e}var n=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,o=function(e){return n.exec(e).slice(1)};function i(e,t){if(e.filter)return e.filter(t);for(var r=[],n=0;n<e.length;n++)t(e[n],n,e)&&r.push(e[n]);return r}t.resolve=function(){for(var t="",n=!1,o=arguments.length-1;o>=-1&&!n;o--){var u=o>=0?arguments[o]:e.cwd();if("string"!=typeof u)throw new TypeError("Arguments to path.resolve must be strings");u&&(t=u+"/"+t,n="/"===u.charAt(0))}return t=r(i(t.split("/"),function(e){return!!e}),!n).join("/"),(n?"/":"")+t||"."},t.normalize=function(e){var n=t.isAbsolute(e),o="/"===u(e,-1);return(e=r(i(e.split("/"),function(e){return!!e}),!n).join("/"))||n||(e="."),e&&o&&(e+="/"),(n?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(i(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,r){function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;r>=0&&""===e[r];r--);return t>r?[]:e.slice(t,r-t+1)}e=t.resolve(e).substr(1),r=t.resolve(r).substr(1);for(var o=n(e.split("/")),i=n(r.split("/")),u=Math.min(o.length,i.length),s=u,c=0;c<u;c++)if(o[c]!==i[c]){s=c;break}var l=[];for(c=s;c<o.length;c++)l.push("..");return(l=l.concat(i.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=o(e),r=t[0],n=t[1];return r||n?(n&&(n=n.substr(0,n.length-1)),r+n):"."},t.basename=function(e,t){var r=o(e)[2];return t&&r.substr(-1*t.length)===t&&(r=r.substr(0,r.length-t.length)),r},t.extname=function(e){return o(e)[3]};var u="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return t<0&&(t=e.length+t),e.substr(t,r)}}).call(this,r(5))},function(e,t,r){r(1),r(9),r(2),r(10),r(3),e.exports=r(11)},function(e,t,r){"use strict";r.r(t);var n=r(2),o=r(1);t.default={trainerRouter:n.default,competitorRouter:o.default}},function(e,t,r){"use strict";r.r(t);var n=r(3);t.default={pageNotFoundMiddleware:n.default}},function(e,t,r){"use strict";r.r(t),function(e){var t=r(0),n=r.n(t),o=r(4),i=r.n(o),u=r(6),s=r.n(u),c=(r(12),r(13),r(7)),l=r.n(c);console.log("routes",i.a);const a=n()();console.log("start server configuration\n"),a.use(n.a.static("dist/public")),a.get("/",(e,t)=>{console.log("dirname in route",l.a.dirname("/dist/public/index.html")),t.sendFile("index.html")}),a.use("/competitor",i.a.competitorRouter),a.use("/trainer",i.a.trainerRouter),a.listen(8080,e=>{console.log("start server listening\n"),e?console.log("server listen error:",e):console.log("server is up")}),console.log("connect to db\n");let f="mongodb://"+e.env.IP;s.a.connect(f).then(()=>{console.log("db is connected")}).catch(e=>{console.log("server connect to db errorw:",e)})}.call(this,r(5))},function(e,t){e.exports=require("body-parser")},function(e,t,r){"use strict";t.__esModule=!0;var n=r(3);t.default={pageNotFoundMiddleware:n.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZXhwcmVzc1wiIiwid2VicGFjazovLy8uL3NyYy9zZXJ2ZXIvY29udHJvbGxlcnMvY29tcGV0aXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL2NvbnRyb2xsZXJzL3RyYWluZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9taWRkbGV3YXJlcy9wYWdlTm90Rm91bmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9jb250cm9sbGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIm1vbmdvb3NlXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL2NvbnRyb2xsZXJzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2ZXIvbWlkZGxld2FyZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9zZXJ2ZXIudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYm9keS1wYXJzZXJcIiIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL21pZGRsZXdhcmVzL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVxdWlyZSIsIl9fd2VicGFja19leHBvcnRzX18iLCJleHByZXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJjb21wZXRpdG9yUm91dGVyIiwiYSIsIlJvdXRlciIsInVzZSIsInJlcSIsInJlcyIsIm5leHQiLCJzZW5kIiwidHJhaW5lclJvdXRlciIsInN0YXR1cyIsInRyYWluZXJfMSIsImNvbXBldGl0b3JfMSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiZSIsInRoaXMiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImxlbmd0aCIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwicHVzaCIsImFwcGx5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwibm9ybWFsaXplQXJyYXkiLCJwYXJ0cyIsImFsbG93QWJvdmVSb290IiwidXAiLCJsYXN0Iiwic3BsaWNlIiwidW5zaGlmdCIsInNwbGl0UGF0aFJlIiwic3BsaXRQYXRoIiwiZmlsZW5hbWUiLCJleGVjIiwic2xpY2UiLCJmaWx0ZXIiLCJ4cyIsImYiLCJyZXNvbHZlIiwicmVzb2x2ZWRQYXRoIiwicmVzb2x2ZWRBYnNvbHV0ZSIsInBhdGgiLCJUeXBlRXJyb3IiLCJjaGFyQXQiLCJzcGxpdCIsImpvaW4iLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsInN1YnN0ciIsInBhdGhzIiwiaW5kZXgiLCJyZWxhdGl2ZSIsImZyb20iLCJ0byIsInRyaW0iLCJhcnIiLCJzdGFydCIsImVuZCIsImZyb21QYXJ0cyIsInRvUGFydHMiLCJNYXRoIiwibWluIiwic2FtZVBhcnRzTGVuZ3RoIiwib3V0cHV0UGFydHMiLCJzZXAiLCJkZWxpbWl0ZXIiLCJkaXJuYW1lIiwicmVzdWx0Iiwicm9vdCIsImJhc2VuYW1lIiwiZXh0IiwiZXh0bmFtZSIsInN0ciIsIl90cmFpbmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfY29tcGV0aXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3BhZ2VOb3RGb3VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicGFnZU5vdEZvdW5kTWlkZGxld2FyZSIsImV4cHJlc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiX2NvbnRyb2xsZXJzX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfY29udHJvbGxlcnNfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwibW9uZ29vc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIm1vbmdvb3NlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsInBhdGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsInBhdGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX19kZWZhdWx0IiwiY29uc29sZSIsImxvZyIsInNlcnZlciIsInN0YXRpYyIsInNlbmRGaWxlIiwibGlzdGVuIiwiZGJVcmwiLCJJUCIsImNvbm5lY3QiLCJ0aGVuIiwiY2F0Y2giLCJwYWdlTm90Rm91bmRfMSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFB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LEVBQU1ELGtCQUMvQm1JLEVBQUFoSSxJQUFBLFdBQXNCeUgsRUFBQTNILEVBQU1PLGVBSzVCMkgsRUFBQUcsT0FBQSxLQUFBakgsSUFDQTRHLFFBQUFDLElBQUEsNEJBQ0E3RyxFQUFBNEcsUUFBQUMsSUFBQSx1QkFBQTdHLEdBQUE0RyxRQUFBQyxJQUFBLGtCQUdBRCxRQUFBQyxJQUFBLG1CQUNBLElBQUFLLEVBQUEsYUFBQXpILEVBQUFrQyxJQUFBd0YsR0FDQVYsRUFBQTdILEVBQVF3SSxRQUFBRixHQUFBRyxLQUFBLEtBQ1JULFFBQUFDLElBQUEscUJBRUFTLE1BQUF0SCxJQUNBNEcsUUFBQUMsSUFBQSwrQkFBQTdHLHFDQzdDQXpELEVBQUFELFFBQUFrQyxRQUFBLDZDQ0NBbEMsRUFBUXNCLFlBQWEsRUFDckIsSUFBSTJKLEVBQWlCL0ksRUFBUSxHQUM3QmxDLEVBQU8sU0FDSDhKLHVCQUF3Qm1CLEVBQWMiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTsiLCJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuY29uc3QgY29tcGV0aXRvclJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbmNvbXBldGl0b3JSb3V0ZXIudXNlKChyZXEscmVzLG5leHQpID0+IHtcbiAgICBuZXh0KCk7XG59KTtcblxuY29tcGV0aXRvclJvdXRlci5nZXQoXCIvXCIsKHJlcSxyZXMpID0+IHtcbiAgICByZXMuc2VuZChcImNvbXBldGl0b3JcIik7XG59KVxuLmdldChcIi9yZWdpc3RlclwiLChyZXEscmVzKSA9PiB7XG4gICAgcmVzLnNlbmQoXCJyZWdpc3RlclwiKTtcbn0pXG4uZ2V0KFwiL2xvZ2luXCIsKHJlcSxyZXMpID0+IHtcbiAgICByZXMuc2VuZChcImxvZ2luXCIpO1xufSlcblxuZXhwb3J0IGRlZmF1bHQgY29tcGV0aXRvclJvdXRlcjsiLCJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuY29uc3QgdHJhaW5lclJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbnRyYWluZXJSb3V0ZXIudXNlKChyZXEscmVzLG5leHQpID0+IHtcbiAgICBuZXh0KCk7XG59KTtcblxudHJhaW5lclJvdXRlci5nZXQoXCIvXCIsKHJlcSxyZXMpID0+IHtcbiAgICByZXMuc2VuZChcInRyYWluZXJcIik7XG59KVxuLmdldChcIi9yZWdpc3RlclwiLChyZXEscmVzKSA9PiB7XG4gICAgcmVzLnNlbmQoXCJ0cmFpbmVyIHJlZ2lzdGVyXCIpO1xufSlcbi5nZXQoXCIvbG9naW5cIiwocmVxLHJlcykgPT4ge1xuICAgIHJlcy5zZW5kKFwidHJhaW5lciBsb2dpblwiKTtcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IHRyYWluZXJSb3V0ZXI7IiwiZXhwb3J0IGRlZmF1bHQgKHJlcSxyZXMsbmV4dCkgPT4ge1xuICAgIHJlcy5zdGF0dXMoNDA0KTtcbiAgICByZXMuc2VuZCgnNDA0IE5vdCBGb3VuZCcpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciB0cmFpbmVyXzEgPSByZXF1aXJlKFwiLi90cmFpbmVyXCIpO1xudmFyIGNvbXBldGl0b3JfMSA9IHJlcXVpcmUoXCIuL2NvbXBldGl0b3JcIik7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHtcbiAgICB0cmFpbmVyUm91dGVyOiB0cmFpbmVyXzFbXCJkZWZhdWx0XCJdLFxuICAgIGNvbXBldGl0b3JSb3V0ZXI6IGNvbXBldGl0b3JfMVtcImRlZmF1bHRcIl1cbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibW9uZ29vc2VcIik7IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG52YXIgc3BsaXRQYXRoUmUgPVxuICAgIC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTtcbn07XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKSxcbiAgICAgIHJvb3QgPSByZXN1bHRbMF0sXG4gICAgICBkaXIgPSByZXN1bHRbMV07XG5cbiAgaWYgKCFyb290ICYmICFkaXIpIHtcbiAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICByZXR1cm4gJy4nO1xuICB9XG5cbiAgaWYgKGRpcikge1xuICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoXG4gICAgZGlyID0gZGlyLnN1YnN0cigwLCBkaXIubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gcm9vdCArIGRpcjtcbn07XG5cblxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IHNwbGl0UGF0aChwYXRoKVsyXTtcbiAgLy8gVE9ETzogbWFrZSB0aGlzIGNvbXBhcmlzb24gY2FzZS1pbnNlbnNpdGl2ZSBvbiB3aW5kb3dzP1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBzcGxpdFBhdGgocGF0aClbM107XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCJpbXBvcnQgdHJhaW5lclJvdXRlciBmcm9tIFwiLi90cmFpbmVyXCI7XG5pbXBvcnQgY29tcGV0aXRvclJvdXRlciBmcm9tIFwiLi9jb21wZXRpdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0cmFpbmVyUm91dGVyOiAgdHJhaW5lclJvdXRlcixcbiAgICBjb21wZXRpdG9yUm91dGVyOiAgIGNvbXBldGl0b3JSb3V0ZXJcbn1cbiIsImltcG9ydCBwYWdlTm90Rm91bmRNaWRkbGV3YXJlIGZyb20gXCIuL3BhZ2VOb3RGb3VuZFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcGFnZU5vdEZvdW5kTWlkZGxld2FyZTogcGFnZU5vdEZvdW5kTWlkZGxld2FyZVxufSIsImltcG9ydCBleHByZXNzIGZyb21cImV4cHJlc3NcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4vY29udHJvbGxlcnMvaW5kZXguanNcIjtcbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xuaW1wb3J0IE1pZGRsZXdhcmVzIGZyb20gXCIuL21pZGRsZXdhcmVzL2luZGV4LmpzXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuY29uc29sZS5sb2coXCJyb3V0ZXNcIixSb3V0ZXMpXG5jb25zdCBzZXJ2ZXIgPSBleHByZXNzKCk7XG5jb25zdCBkYk9wdGlvbnMgPSB7XG4gICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlXG59O1xuXG4vLyBzZXJ2ZXIgY29uZmlndXJhdGlvblxuXG5jb25zb2xlLmxvZyhcInN0YXJ0IHNlcnZlciBjb25maWd1cmF0aW9uXFxuXCIpO1xuc2VydmVyLnVzZShleHByZXNzLnN0YXRpYyhcImRpc3QvcHVibGljXCIpKTtcbi8vIHNlcnZlci51c2UoZXhwcmVzcy5zdGF0aWMoXCIuL2Rpc3QvcHVibGljJykpO1xuLy8gc2VydmVyLnVzZShib2R5UGFyc2VyKTtcbi8vIHNlcnZlci51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL2NsaWVudC9idWlsZCcpKSlcblxuLy9NaWRkbGV3YXJlc1xuXG4vLyBST1VURVNcbnNlcnZlci5nZXQoXCIvXCIsKHJlcSxyZXMpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcImRpcm5hbWUgaW4gcm91dGVcIixwYXRoLmRpcm5hbWUoJy9kaXN0L3B1YmxpYy9pbmRleC5odG1sJykpO1xuICAgIC8vIHJlcy5zZW5kRmlsZShfX2Rpcm5hbWUgKyAnL2luZGV4Lmh0bWwnKTtcbiAgICByZXMuc2VuZEZpbGUoJ2luZGV4Lmh0bWwnKVxufSk7XG5zZXJ2ZXIudXNlKFwiL2NvbXBldGl0b3JcIixSb3V0ZXMuY29tcGV0aXRvclJvdXRlcik7XG5zZXJ2ZXIudXNlKFwiL3RyYWluZXJcIixSb3V0ZXMudHJhaW5lclJvdXRlcik7XG4vLyBzZXJ2ZXIudXNlKE1pZGRsZXdhcmVzLnBhZ2VOb3RGb3VuZE1pZGRsZXdhcmUpO1xuXG4vLyBMSVNURU5cbi8vIHByb2Nlc3MuZW52LlBPUlRcbnNlcnZlci5saXN0ZW4oODA4MCwoZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwic3RhcnQgc2VydmVyIGxpc3RlbmluZ1xcblwiKTtcbiAgICAoZSA/IGNvbnNvbGUubG9nKFwic2VydmVyIGxpc3RlbiBlcnJvcjpcIixlKSA6IGNvbnNvbGUubG9nKFwic2VydmVyIGlzIHVwXCIpKTtcbn0pO1xuLy8gREIgQ09OTkVDVFxuY29uc29sZS5sb2coXCJjb25uZWN0IHRvIGRiXFxuXCIpO1xubGV0IGRiVXJsID0gJ21vbmdvZGI6Ly8nICsgcHJvY2Vzcy5lbnYuSVA7XG5tb25nb29zZS5jb25uZWN0KGRiVXJsKS50aGVuKCgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcImRiIGlzIGNvbm5lY3RlZFwiKTtcbn0pXG4uY2F0Y2goKGUpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcInNlcnZlciBjb25uZWN0IHRvIGRiIGVycm9ydzpcIixlKTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm9keS1wYXJzZXJcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIHBhZ2VOb3RGb3VuZF8xID0gcmVxdWlyZShcIi4vcGFnZU5vdEZvdW5kXCIpO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB7XG4gICAgcGFnZU5vdEZvdW5kTWlkZGxld2FyZTogcGFnZU5vdEZvdW5kXzFbXCJkZWZhdWx0XCJdXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==